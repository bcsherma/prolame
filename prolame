#!/usr/bin/env python3
"""
prolame: A logic programming language for reasoning about natural numbers
"""

import pycosat
import argparse
import operator
import ply.lex as lex
import ply.yacc as yacc
from itertools import combinations_with_replacement as cwr, permutations
from functools import reduce


tokens = ("LPAREN", "RPAREN", "NOT", "VAR", "NUMBER", "PERIOD", "ENTAILED",
          "IDENT", "COMMA", "PLUS", "MINUS", "TIMES", "MOD", "QUESTION")

t_LPAREN = r"\("
t_RPAREN = r"\)"
t_PERIOD = r"\."
t_COMMA = r","
t_QUESTION = r"\?"

t_PLUS = r"\+"
t_MINUS = r"-"
t_TIMES = r"\*"
t_MOD = r"%"

t_NOT = r"not"
t_ENTAILED = r":-"

t_VAR = r"[A-Z][a-zA-Z0-9_]*"
t_NUMBER = r"\d+"
t_ignore = ' \t'


def t_newline(t):
    r'\n+'
    t.lexer.lineno += len(t.value)


def t_IDENT(t):
    r"[a-z][A-Za-z0-9_]*"
    if t.value == "not":
        t.type = "NOT"
    return t


def t_error(t):
    print(f"Illegal character '{t.value[0]}' at line {t.lexer.lineno}")
    exit(1)


precedence = (
    ('left', 'PLUS', 'MINUS', 'MOD', 'TIMES'),
)


def p_program(p):
    """program : program rule
               | program fact
               | program query
               | program declaration
               | """
    # Don't do anything


def p_declaration(p):
    """declaration : IDENT NUMBER PERIOD"""

    # save this predicate and its arity in the global table
    Program.predicates[p[1]] = int(p[2])


def p_fact(p):
    """fact : IDENT LPAREN params RPAREN PERIOD
            | NOT IDENT LPAREN params RPAREN PERIOD"""
    
    # Add this fact to the global table of facts
    if p[1] == "not":
        Program.facts.append((-1, p[2], p[4]))
    else:
        Program.facts.append((1, p[1], p[3]))


def p_query(p):
    """query : QUESTION IDENT LPAREN params RPAREN PERIOD"""
    
    # Add this query to the global table of queries 
    Program.queries.append((p[2], p[4]))


def p_params(p):
    """params : var_expr
              | params COMMA var_expr"""

    # Return a list of parameters
    if len(p) > 2:
        p[0] = p[1] + [p[3]]
    else:
        p[0] = [p[1]]


def p_var_expr(p):
    """var_expr : VAR
                | NUMBER
                | var_expr PLUS var_expr
                | var_expr MINUS var_expr
                | var_expr MOD var_expr
                | var_expr TIMES var_expr"""

    # Return either the single term or a tuple of terms
    if len(p) > 2:
        p[0] = (p[1], p[2], p[3])
    else:
        p[0] = p[1]
        if p[0].isdigit():
            p[0] = int(p[0])


def p_predicate(p):
    """predicate : IDENT LPAREN params RPAREN
                 | NOT IDENT LPAREN params RPAREN"""

    # Return the truth/falsity, predicate, and parameters
    if p[1] == "not":
        p[0] = (-1, p[2], p[4])
    else:
        p[0] = (1, p[1], p[3])


def p_antecedents(p):
    """antecedents : predicate
                   | predicate COMMA antecedents"""

    # Return a list of all the antecedents
    if len(p) < 3:
        p[0] = [p[1]]

    else:
        ret = p[3][:]
        ret.append(p[1])
        p[0] = ret


def p_rule(p):
    "rule : predicate ENTAILED antecedents PERIOD"
    
    # return consequent and antecedents
    Program.rules.append((p[1], p[3]))


def p_error(p):
    if p:
         print(f"Syntax error at token '{p.value}' on line {p.lineno}")
    else:
         print("Syntax error at EOF")
    exit()

class Program:
    """Singleton class that stores some globals"""
    max = 100
    next_variable = 1
    predicates = {}
    rules = []
    facts = []
    queries = []
    clauses = []
    arithmetics = {
        "+": lambda x, y: x + y,
        "-": lambda x, y: x - y,
        "%": lambda x, y: x % y,
        "*": lambda x, y: int(x * y)
    }
    predicateToVariable = None
    variableToStatement = {}

    def next_var():
        """Return next available boolean variable indetifier and increment"""
        Program.next_variable += 1
        return Program.next_variable - 1


def parseProgram(program):
    """Run the parser"""
    lexer = lex.lex()
    lexer.input(program)
    yacc.yacc()
    yacc.parse(program)

def evaluate(expression, table):
    """Recursively evaluate an arithmetic expression"""
    if isinstance(expression, int):
        return expression
    elif isinstance(expression, str):
        return table[expression]
    else:
        return Program.arithmetics[expression[1]](
                evaluate(expression[0], table), evaluate(expression[2], table)
            )


def getFromDict(dataDict, mapList):
    return reduce(operator.getitem, mapList, dataDict)


def makeVariableTable(p, variableChain, depth):
    """
    Create a mapping from the domain to variables or from the domain to
    itself depending on the depth of the mapping, i.e. the arity of the
    predicate
    """

    if depth == 1:
        ret = {}
        for i in range(1, Program.max + 1):
            # Get a variable for this variable predicate combination
            nv = Program.next_var()
            ret[i] = nv
    
            # Construct the string that the variable represents
            old_params = ",".join(map(str, variableChain))
            if old_params:
                params = old_params + "," + str(i)
            else:
                params = str(nv)
            Program.variableToStatement[nv] = f"{p}({params})"
            
        # Return this dictionary
        return ret

    else:
        return {i: makeVariableTable(p, variableChain + [i], depth - 1)
                for i in range(1, Program.max + 1)}

def makeTables():
    """
    Initialize table mapping predicates to elements to variables and another
    mapping variables to their meaning
    """
    # initialize dictionaries we will use to store the meaning of each variable
    Program.predicateToVariable = {p: makeVariableTable(p, [], 
                                                        Program.predicates[p])
                                   for p in Program.predicates.keys()}


def initializeFacts():
    """Initialize a formula with the facts written as facts"""
    # create an empty list of clauses
    clauses = []

    # add all facts as unit clauses
    for sign, predicate, params in Program.facts:
        parameters = [evaluate(p, {}) for p in params]
        Program.clauses.append(
            [sign*getFromDict(Program.predicateToVariable,
                [predicate] + parameters)]
        )

    # return the formula
    return clauses


def getVarsFromExpr(expr):
    """Get all the variables occuring in a single exression"""
    if isinstance(expr, str):
        return set([expr])
    elif isinstance(expr, int):
        return set()
    elif len(expr) == 3:
        return set(getVarsFromExpr(expr[0])) | set(getVarsFromExpr(expr[2]))
    return set()


def getVarsFromPredicate(predicate):
    """Get all the variables occuring in a predicate"""
    variables = set()
    for param in predicate[2]:
        variables = variables | getVarsFromExpr(param)
    return variables


def getVariableFromPredicate(predicate, table):
    """
    Get the boolean variable indicated by a predicate given an assignment 
    of the numberic variables to integers
    """
    params = predicate[2]
    values = [evaluate(p, table) for p in params]
    return (predicate[0]
            *getFromDict(Program.predicateToVariable[predicate[1]], values))


def exprToString(expr):
    if isinstance(expr, str):
        return expr
    elif isinstance(expr, int):
        return str(expr)
    else:
        return exprToString(expr[0]) + expr[1] + exprToString(expr[2])


def predToString(predicate):
    """
    Given a predicate triplet of sign, predicate, parameters, format them
    as a string
    """
    sign, pred, params = predicate
    return (("not " if sign < 0 else "") 
            + f"{pred}({','.join(map(exprToString, params))})")


def enforceRules():
    """Enforce all rules over all relevant variables"""

    # add all rules as implications
    for consequent, antecedents in Program.rules:
        
        variables = getVarsFromPredicate(consequent)
        for ant in antecedents:
            variables = variables | getVarsFromPredicate(ant)
        
        for combos in cwr(range(1, Program.max + 1), len(variables)):
            for values in permutations(combos):
                try:
                    table = {var: val for var, val in zip(variables, values)}
                    cons = getVariableFromPredicate(consequent, table)
                    ant = [-1*getVariableFromPredicate(a, table) 
                           for a in antecedents]
                    Program.clauses.append(ant + [cons])
                except KeyError:
                    # We tried to apply a rule for a value outside the max
                    pass


if __name__ == "__main__":
    # create the parser
    parser = argparse.ArgumentParser(description=__doc__.strip())
    parser.add_argument("program", help="Program program", type=str)
    parser.add_argument("--max", help="maximum integer", type=int, default=100)
    args = parser.parse_args()

    # read in the program
    program = open(args.program).read()
    Program.max = args.max
    parseProgram(program)

    # print some things about the program we parsed
    print("declared predicates:")
    for predicate, arity in Program.predicates.items():
        print("\t", end="")
        print(predicate, f"(arity-{arity})")
    print()
    
    print("facts:")
    for pred in Program.facts:
        print("\t", end="")
        print(predToString(pred))
    print()
          
    print("rules:")
    for consequent, antecedents in Program.rules:
        print("\t", end="")
        print(predToString(consequent), ":-", end=" ")
        for ant in antecedents:
            print(predToString(ant), end=" ")
        print()
    print()

    makeTables()
    initializeFacts()
    enforceRules()

    for pred, params in Program.queries:
        print("query:", predToString((1, pred, params)), end=" ")
        values = [evaluate(p, {}) for p in params]
        variable = getFromDict(Program.predicateToVariable[pred], values)
        
        can_be_true = (0 if pycosat.solve(Program.clauses + [[variable]])
                    == "UNSAT" else 1)
        can_be_false = (0 if pycosat.solve(Program.clauses + [[-1*variable]])
                        == "UNSAT" else 1)

        if can_be_true and can_be_false:
            print("undetermined")
        elif can_be_true:
            print("true")
        else:
            print("false")
